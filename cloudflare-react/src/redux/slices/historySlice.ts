import { createSlice, createAsyncThunk, type PayloadAction } from '@reduxjs/toolkit';
import { historyService, type CalculationSession } from '../../service/historyService';

// ==================== –¢–ò–ü–´ –°–û–°–¢–û–Ø–ù–ò–Ø ====================

export interface HistoryState {
  sessions: CalculationSession[];
  currentSession: CalculationSession | null;
  loading: boolean;
  error: string | null;
  statistics: {
    totalSessions: number;
    completedSessions: number;
    inProgressSessions: number;
    totalUsers: number;
    currentUser: string;
  } | null;
  lastSaved: string | null;
}

const initialState: HistoryState = {
  sessions: [],
  currentSession: null,
  loading: false,
  error: null,
  statistics: null,
  lastSaved: null,
};

// ==================== ASYNC THUNKS ====================

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
export const createSession = createAsyncThunk(
  'history/createSession',
  async (params: { title?: string; description?: string }) => {
    console.log('üîµ Redux: createSession –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);
    const sessionId = await historyService.createSession(params.title, params.description);
    console.log('üîµ Redux: createSession –≤–µ—Ä–Ω—É–ª sessionId:', sessionId);
    const session = await historyService.getCurrentSession();
    console.log('üîµ Redux: getCurrentSession –≤–µ—Ä–Ω—É–ª:', session);
    return session;
  }
);

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loadUserSessions = createAsyncThunk(
  'history/loadUserSessions',
  async () => {
    console.log('üîµ Redux: loadUserSessions –≤—ã–∑–≤–∞–Ω');
    const sessions = await historyService.getAllSessions();
    console.log('üîµ Redux: loadUserSessions –ø–æ–ª—É—á–∏–ª —Å–µ—Å—Å–∏–∏:', sessions.length);
    return sessions;
  }
);

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
export const loadAllSessions = createAsyncThunk(
  'history/loadAllSessions',
  async () => {
    return await historyService.getAllSessions();
  }
);

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export const loadStatistics = createAsyncThunk(
  'history/loadStatistics',
  async () => {
    return await historyService.getStatistics();
  }
);

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ë–ª–æ–∫–∞ 1
export const saveBlockOneData = createAsyncThunk(
  'history/saveBlockOneData',
  async (params: {
    sessionId: string;
    stateRoadBudget: any[];
    localRoadBudget: any[];
    q1Result: number;
    q2Result: number;
  }) => {
    console.log('üîµ Redux: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ë–ª–æ–∫–∞ 1:', params);
    const success = await historyService.saveBlockOneData(
      params.sessionId,
      params.stateRoadBudget,
      params.localRoadBudget,
      params.q1Result,
      params.q2Result
    );
    console.log('üîµ Redux: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–ª–æ–∫–∞ 1:', success);
    if (success) {
      const session = await historyService.getCurrentSession();
      console.log('üîµ Redux: –ü–æ–ª—É—á–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', session);
      return session;
    }
    throw new Error('Failed to save Block One data');
  }
);

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ë–ª–æ–∫–∞ 2
export const saveBlockTwoData = createAsyncThunk(
  'history/saveBlockTwoData',
  async (params: {
    sessionId: string;
    stateRoadBaseRate: number;
    localRoadBaseRate: number;
    stateInflationIndexes: number[];
    localInflationIndexes: number[];
    selectedRegion: string;
    stateRoadRates: any;
    localRoadRates: any;
    fundingResults: any;
    regionalResults?: any[]; // ‚úÖ –î–û–î–ê–ù–û
    regionalData?: any[]; // ‚úÖ –î–û–î–ê–ù–û
    roadType?: 'state' | 'local'; // ‚úÖ –î–û–î–ê–ù–û
  }) => {
    const success = await historyService.saveBlockTwoData(
      params.sessionId,
      params.stateRoadBaseRate,
      params.localRoadBaseRate,
      params.stateInflationIndexes,
      params.localInflationIndexes,
      params.selectedRegion,
      params.stateRoadRates,
      params.localRoadRates,
      params.fundingResults,
      params.regionalResults, // ‚úÖ –ü–ï–†–ï–î–ê–Ñ–ú–û
      params.regionalData, // ‚úÖ –ü–ï–†–ï–î–ê–Ñ–ú–û
      params.roadType // ‚úÖ –ü–ï–†–ï–î–ê–Ñ–ú–û
    );
    if (success) {
      return await historyService.getCurrentSession();
    }
    throw new Error('Failed to save Block Two data');
  }
);

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ë–ª–æ–∫–∞ 3
export const saveBlockThreeData = createAsyncThunk(
  'history/saveBlockThreeData',
  async (params: {
    sessionId: string;
    sections: any[];
    planningData: any;
    complianceAnalysis: any;
    reportText: string;
  }) => {
    const success = await historyService.saveBlockThreeData(
      params.sessionId,
      params.sections,
      params.planningData,
      params.complianceAnalysis,
      params.reportText
    );
    if (success) {
      return await historyService.getCurrentSession();
    }
    throw new Error('Failed to save Block Three data');
  }
);

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
export const deleteSession = createAsyncThunk(
  'history/deleteSession',
  async (sessionId: string) => {
    const success = await historyService.deleteSession(sessionId);
    if (success) {
      return sessionId;
    }
    throw new Error('Failed to delete session');
  }
);

// –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–∏
export const exportSession = createAsyncThunk(
  'history/exportSession',
  async (sessionId: string) => {
    const jsonData = await historyService.exportSession(sessionId);
    if (jsonData) {
      return { sessionId, jsonData };
    }
    throw new Error('Failed to export session');
  }
);

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const cleanupOldData = createAsyncThunk(
  'history/cleanupOldData',
  async (daysToKeep: number = 30) => {
    return await historyService.cleanupOldData(daysToKeep);
  }
);

// ==================== SLICE ====================

const historySlice = createSlice({
  name: 'history',
  initialState,
  reducers: {
    // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    setCurrentSession: (state, action: PayloadAction<CalculationSession | null>) => {
      state.currentSession = action.payload;
    },
    
    setSelectedSession: (state, action: PayloadAction<CalculationSession | null>) => {
      // –î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ UI
      state.currentSession = action.payload;
    },
    
    clearError: (state) => {
      state.error = null;
    },
    
    setLastSaved: (state, action: PayloadAction<string>) => {
      state.lastSaved = action.payload;
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    updateSessionLocally: (state, action: PayloadAction<CalculationSession>) => {
      const index = state.sessions.findIndex(s => s.id === action.payload.id);
      if (index >= 0) {
        state.sessions[index] = action.payload;
      }
      if (state.currentSession?.id === action.payload.id) {
        state.currentSession = action.payload;
      }
    },
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    addSessionLocally: (state, action: PayloadAction<CalculationSession>) => {
      state.sessions.unshift(action.payload);
      state.currentSession = action.payload;
    },
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    removeSessionLocally: (state, action: PayloadAction<string>) => {
      state.sessions = state.sessions.filter(s => s.id !== action.payload);
      if (state.currentSession?.id === action.payload) {
        state.currentSession = null;
      }
    },
  },
  extraReducers: (builder) => {
    builder
      // Create Session
      .addCase(createSession.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(createSession.fulfilled, (state, action) => {
        state.loading = false;
        if (action.payload) {
          console.log('üîµ Redux: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è:', action.payload);
          state.currentSession = action.payload;
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –µ—ë —Ç–∞–º –Ω–µ—Ç
          const exists = state.sessions.some(s => s.id === action.payload!.id);
          if (!exists) {
            state.sessions.unshift(action.payload);
            console.log('üîµ Redux: –°–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫. –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:', state.sessions.length);
          } else {
            console.log('üîµ Redux: –°–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ');
          }
        } else {
          console.log('üîµ Redux: createSession.fulfilled –ø–æ–ª—É—á–∏–ª null payload');
        }
      })
      .addCase(createSession.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to create session';
      })
      
      // Load User Sessions
      .addCase(loadUserSessions.pending, (state) => {
        state.loading = true;
        state.error = null;
        console.log('üîµ Redux: loadUserSessions.pending');
      })
      .addCase(loadUserSessions.fulfilled, (state, action) => {
        state.loading = false;
        state.sessions = action.payload;
        console.log('üîµ Redux: –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–µ—Å—Å–∏–∏:', action.payload.length);
        console.log('üîµ Redux: –°–µ—Å—Å–∏–∏:', action.payload.map(s => ({ id: s.id, title: s.title })));
      })
      .addCase(loadUserSessions.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to load sessions';
        console.log('üîµ Redux: loadUserSessions.rejected:', action.error.message);
      })
      
      // Load All Sessions
      .addCase(loadAllSessions.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loadAllSessions.fulfilled, (state, action) => {
        state.loading = false;
        state.sessions = action.payload;
        console.log('üîµ Redux: loadAllSessions.fulfilled:', action.payload.length);
      })
      .addCase(loadAllSessions.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to load all sessions';
        console.log('üîµ Redux: loadAllSessions.rejected:', action.error.message);
      })
      
      // Load Statistics
      .addCase(loadStatistics.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loadStatistics.fulfilled, (state, action) => {
        state.loading = false;
        state.statistics = action.payload;
      })
      .addCase(loadStatistics.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to load statistics';
      })
      
      // Save Block One Data
      .addCase(saveBlockOneData.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(saveBlockOneData.fulfilled, (state, action) => {
        state.loading = false;
        console.log('üîµ Redux: saveBlockOneData.fulfilled:', action.payload);
        if (action.payload) {
          state.currentSession = action.payload;
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ —Å–ø–∏—Å–∫–µ
          const index = state.sessions.findIndex(s => s.id === action.payload!.id);
          if (index >= 0) {
            state.sessions[index] = action.payload;
            console.log('üîµ Redux: –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è –≤ —Å–ø–∏—Å–∫–µ');
          } else {
            state.sessions.unshift(action.payload);
            console.log('üîµ Redux: –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –≤ —Å–ø–∏—Å–æ–∫');
          }
          state.lastSaved = new Date().toISOString();
          console.log('üîµ Redux: –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ Redux:', state.sessions.length);
        }
      })
      .addCase(saveBlockOneData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to save Block One data';
      })
      
      // Save Block Two Data
      .addCase(saveBlockTwoData.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(saveBlockTwoData.fulfilled, (state, action) => {
        state.loading = false;
        if (action.payload) {
          state.currentSession = action.payload;
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ —Å–ø–∏—Å–∫–µ
          const index = state.sessions.findIndex(s => s.id === action.payload!.id);
          if (index >= 0) {
            state.sessions[index] = action.payload;
          }
          state.lastSaved = new Date().toISOString();
        }
      })
      .addCase(saveBlockTwoData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to save Block Two data';
      })
      
      // Save Block Three Data
      .addCase(saveBlockThreeData.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(saveBlockThreeData.fulfilled, (state, action) => {
        state.loading = false;
        if (action.payload) {
          state.currentSession = action.payload;
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ —Å–ø–∏—Å–∫–µ
          const index = state.sessions.findIndex(s => s.id === action.payload!.id);
          if (index >= 0) {
            state.sessions[index] = action.payload;
          }
          state.lastSaved = new Date().toISOString();
        }
      })
      .addCase(saveBlockThreeData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to save Block Three data';
      })
      
      // Delete Session
      .addCase(deleteSession.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(deleteSession.fulfilled, (state, action) => {
        state.loading = false;
        state.sessions = state.sessions.filter(s => s.id !== action.payload);
        if (state.currentSession?.id === action.payload) {
          state.currentSession = null;
        }
      })
      .addCase(deleteSession.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to delete session';
      })
      
      // Export Session
      .addCase(exportSession.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(exportSession.fulfilled, (state) => {
        state.loading = false;
        // –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª
      })
      .addCase(exportSession.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to export session';
      })
      
      // Cleanup Old Data
      .addCase(cleanupOldData.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(cleanupOldData.fulfilled, (state) => {
        state.loading = false;
        // –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏
      })
      .addCase(cleanupOldData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to cleanup old data';
      })
      // Clear All Data
      .addCase(clearAllData.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(clearAllData.fulfilled, (state) => {
        state.loading = false;
        // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state.sessions = [];
        state.currentSession = null;
        state.statistics = null;
        state.lastSaved = null;
        console.log('üî¥ Redux: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      })
      .addCase(clearAllData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to clear all data';
      });
  },
});

// ==================== –≠–ö–°–ü–û–†–¢ ====================

export const {
  setCurrentSession,
  setSelectedSession,
  clearError,
  setLastSaved,
  updateSessionLocally,
  addSessionLocally,
  removeSessionLocally,
} = historySlice.actions;

export default historySlice.reducer;

// ==================== –°–ï–õ–ï–ö–¢–û–†–´ ====================

export const selectHistoryState = (state: { history: HistoryState }) => state.history;
export const selectSessions = (state: { history: HistoryState }) => state.history.sessions;
export const selectCurrentSession = (state: { history: HistoryState }) => state.history.currentSession;
export const selectHistoryLoading = (state: { history: HistoryState }) => state.history.loading;
export const selectHistoryError = (state: { history: HistoryState }) => state.history.error;
export const selectHistoryStatistics = (state: { history: HistoryState }) => state.history.statistics;
export const selectLastSaved = (state: { history: HistoryState }) => state.history.lastSaved;

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π
export const selectCompletedSessions = (state: { history: HistoryState }) => 
  state.history.sessions.filter(s => s.isComplete);

export const selectInProgressSessions = (state: { history: HistoryState }) => 
  state.history.sessions.filter(s => !s.isComplete && (s.blockOneData || s.blockTwoData || s.blockThreeData));

export const selectNewSessions = (state: { history: HistoryState }) => 
  state.history.sessions.filter(s => !s.blockOneData && !s.blockTwoData && !s.blockThreeData);

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤
export const selectSessionsWithBlockOne = (state: { history: HistoryState }) => 
  state.history.sessions.filter(s => s.blockOneData);

export const selectSessionsWithBlockTwo = (state: { history: HistoryState }) => 
  state.history.sessions.filter(s => s.blockTwoData);

export const selectSessionsWithBlockThree = (state: { history: HistoryState }) => 
  state.history.sessions.filter(s => s.blockThreeData);

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
export const selectSessionsByDateRange = (state: { history: HistoryState }, startDate: Date, endDate: Date) => 
  state.history.sessions.filter(s => {
    const sessionDate = new Date(s.updatedAt);
    return sessionDate >= startDate && sessionDate <= endDate;
  });

export const selectSessionsByYear = (state: { history: HistoryState }, year: number) => 
  state.history.sessions.filter(s => new Date(s.updatedAt).getFullYear() === year);

export const selectSessionsByMonth = (state: { history: HistoryState }, year: number, month: number) => 
  state.history.sessions.filter(s => {
    const sessionDate = new Date(s.updatedAt);
    return sessionDate.getFullYear() === year && sessionDate.getMonth() === month;
  });

export const selectSessionsByDay = (state: { history: HistoryState }, year: number, month: number, day: number) => 
  state.history.sessions.filter(s => {
    const sessionDate = new Date(s.updatedAt);
    return sessionDate.getFullYear() === year && 
           sessionDate.getMonth() === month && 
           sessionDate.getDate() === day;
  });

// –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–∞–º
export const selectSessionsGroupedByYear = (state: { history: HistoryState }) => {
  const grouped: { [year: string]: CalculationSession[] } = {};
  state.history.sessions.forEach(session => {
    const year = new Date(session.updatedAt).getFullYear().toString();
    if (!grouped[year]) {
      grouped[year] = [];
    }
    grouped[year].push(session);
  });
  return grouped;
};

export const selectSessionsGroupedByMonth = (state: { history: HistoryState }, year: number) => {
  const grouped: { [month: string]: CalculationSession[] } = {};
  const yearSessions = selectSessionsByYear(state, year);
  yearSessions.forEach(session => {
    const month = new Date(session.updatedAt).getMonth();
    const monthKey = `${year}-${month.toString().padStart(2, '0')}`;
    if (!grouped[monthKey]) {
      grouped[monthKey] = [];
    }
    grouped[monthKey].push(session);
  });
  return grouped;
};

export const selectSessionsGroupedByDay = (state: { history: HistoryState }, year: number, month: number) => {
  const grouped: { [day: string]: CalculationSession[] } = {};
  const monthSessions = selectSessionsByMonth(state, year, month);
  monthSessions.forEach(session => {
    const day = new Date(session.updatedAt).getDate();
    const dayKey = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
    if (!grouped[dayKey]) {
      grouped[dayKey] = [];
    }
    grouped[dayKey].push(session);
  });
  return grouped;
};

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ–¥–æ–≤
export const selectAvailableYears = (state: { history: HistoryState }) => {
  const years = new Set<number>();
  state.history.sessions.forEach(session => {
    years.add(new Date(session.updatedAt).getFullYear());
  });
  return Array.from(years).sort((a, b) => b - a); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
};

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –≤ –≥–æ–¥—É
export const selectAvailableMonths = (state: { history: HistoryState }, year: number) => {
  const months = new Set<number>();
  const yearSessions = selectSessionsByYear(state, year);
  yearSessions.forEach(session => {
    months.add(new Date(session.updatedAt).getMonth());
  });
  return Array.from(months).sort((a, b) => b - a); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
};

// –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
export const selectAvailableDays = (state: { history: HistoryState }, year: number, month: number) => {
  const days = new Set<number>();
  const monthSessions = selectSessionsByMonth(state, year, month);
  monthSessions.forEach(session => {
    days.add(new Date(session.updatedAt).getDate());
  });
  return Array.from(days).sort((a, b) => b - a); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
};

// ==================== CLEAR ALL DATA ====================

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
export const clearAllData = createAsyncThunk(
  'history/clearAllData',
  async () => {
    console.log('üî¥ Redux: clearAllData –≤—ã–∑–≤–∞–Ω - –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö');
    await historyService.clearAllData();
    console.log('üî¥ Redux: clearAllData –∑–∞–≤–µ—Ä—à–µ–Ω');
    return true;
  }
);