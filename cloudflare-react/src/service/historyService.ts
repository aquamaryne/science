/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
 */

import type { BudgetItem } from '../redux/slices/blockOneSlice';
import type { RoadSectionUI } from '../components/view/block_three_page';

// ==================== –¢–ò–ü–´ –î–ê–ù–ù–´–• ====================

export interface BlockOneHistoryData {
  id: string;
  userId: string;
  sessionId: string;
  timestamp: Date;
  stateRoadBudget: BudgetItem[];
  localRoadBudget: BudgetItem[];
  q1Result: number;
  q2Result: number;
  totalBudget: number;
  status: 'completed' | 'in_progress' | 'failed';
}

export interface BlockTwoHistoryData {
  id: string;
  userId: string;
  sessionId: string;
  timestamp: Date;
  stateRoadBaseRate: number;
  localRoadBaseRate: number;
  stateInflationIndexes: number[];
  localInflationIndexes: number[];
  selectedRegion: string;
  stateRoadRates: {
    category1: number;
    category2: number;
    category3: number;
    category4: number;
    category5: number;
  };
  localRoadRates: {
    category1: number;
    category2: number;
    category3: number;
    category4: number;
    category5: number;
  };
  fundingResults: {
    stateFunding: number;
    localFunding: number;
    totalFunding: number;
  };
  status: 'completed' | 'in_progress' | 'failed';
}

export interface BlockThreeHistoryData {
  id: string;
  userId: string;
  sessionId: string;
  timestamp: Date;
  sections: RoadSectionUI[];
  planningData: {
    budget: number;
    utilizationPercent: number;
    selectedProjects: {
      currentRepair: number;
      capitalRepair: number;
      reconstruction: number;
    };
  };
  complianceAnalysis: {
    compliantSections: number;
    nonCompliantSections: number;
    categoryIssues: number;
    frictionIssues: number;
  };
  enpvResults?: {
    enpv: number;
    eirr: number;
    bcr: number;
    paybackPeriod: number;
  };
  reportText: string;
  status: 'completed' | 'in_progress' | 'failed';
}

export interface CalculationSession {
  id: string;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
  blockOneData?: BlockOneHistoryData;
  blockTwoData?: BlockTwoHistoryData;
  blockThreeData?: BlockThreeHistoryData;
  isComplete: boolean;
  title?: string;
  description?: string;
}

export interface UserSession {
  userId: string;
  userName: string;
  currentSessionId: string | null;
  sessions: string[];
  lastActivity: Date;
}

// ==================== –°–ï–†–í–ò–° –ò–°–¢–û–†–ò–ò ====================

class HistoryService {
  private readonly STORAGE_KEY = 'ias_roads_history';
  private readonly USER_SESSIONS_KEY = 'ias_roads_user_sessions';
  private readonly MAX_HISTORY_ITEMS = 1000; // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private generateUserId(): string {
    return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–µ—Å—Å–∏–∏
   */
  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async getUserSession(): Promise<UserSession> {
    try {
    const stored = localStorage.getItem(this.USER_SESSIONS_KEY);
      if (stored) {
        const userSessions: UserSession[] = JSON.parse(stored);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        const lastUser = userSessions[userSessions.length - 1];
        if (lastUser) {
          // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
          const lastActivity = new Date(lastUser.lastActivity);
          if (Date.now() - lastActivity.getTime() < 24 * 60 * 60 * 1000) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            lastUser.lastActivity = new Date();
            await this.saveUserSessions(userSessions);
            return lastUser;
          }
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser: UserSession = {
      userId: this.generateUserId(),
      userName: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${new Date().toLocaleString('uk-UA')}`,
      currentSessionId: null,
      sessions: [],
      lastActivity: new Date()
    };

    await this.saveUserSession(newUser);
    return newUser;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async saveUserSession(user: UserSession): Promise<void> {
    try {
      const stored = localStorage.getItem(this.USER_SESSIONS_KEY);
      const userSessions: UserSession[] = stored ? JSON.parse(stored) : [];
      
      const existingIndex = userSessions.findIndex(u => u.userId === user.userId);
      if (existingIndex >= 0) {
        userSessions[existingIndex] = user;
      } else {
        userSessions.push(user);
      }

      await this.saveUserSessions(userSessions);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private async saveUserSessions(userSessions: UserSession[]): Promise<void> {
    try {
      localStorage.setItem(this.USER_SESSIONS_KEY, JSON.stringify(userSessions));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤
   */
  async createSession(title?: string, description?: string): Promise<string> {
    const user = await this.getUserSession();
    const sessionId = this.generateSessionId();
    
    const session: CalculationSession = {
      id: sessionId,
      userId: user.userId,
      createdAt: new Date(),
      updatedAt: new Date(),
      isComplete: false,
      title: title || `–°–µ—Å—Å–∏—è ${new Date().toLocaleString('uk-UA')}`,
      description
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    console.log('üîµ HistoryService: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é:', session);
    await this.saveSession(session);
    console.log('üîµ HistoryService: –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.currentSessionId = sessionId;
    user.sessions.push(sessionId);
    user.lastActivity = new Date();
    console.log('üîµ HistoryService: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user);
    await this.saveUserSession(user);
    console.log('üîµ HistoryService: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');

    console.log(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ${sessionId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.userId}`);
    return sessionId;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é
   */
  private async saveSession(session: CalculationSession): Promise<void> {
    try {
    const stored = localStorage.getItem(this.STORAGE_KEY);
    const sessions: CalculationSession[] = stored ? JSON.parse(stored) : [];
      
      const existingIndex = sessions.findIndex(s => s.id === session.id);
      if (existingIndex >= 0) {
        sessions[existingIndex] = session;
      } else {
        sessions.push(session);
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
      if (sessions.length > this.MAX_HISTORY_ITEMS) {
        sessions.splice(0, sessions.length - this.MAX_HISTORY_ITEMS);
      }

      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(sessions));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∞ 1
   */
  async saveBlockOneData(
    sessionId: string,
    stateRoadBudget: BudgetItem[],
    localRoadBudget: BudgetItem[],
    q1Result: number,
    q2Result: number
  ): Promise<boolean> {
    try {
      const user = await this.getUserSession();
      const session = await this.getSession(sessionId);
      
      if (!session) {
        console.error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sessionId);
        return false;
      }

      const blockOneData: BlockOneHistoryData = {
        id: `block_one_${Date.now()}`,
        userId: user.userId,
        sessionId,
        timestamp: new Date(),
        stateRoadBudget: [...stateRoadBudget],
        localRoadBudget: [...localRoadBudget],
        q1Result,
        q2Result,
        totalBudget: q1Result + q2Result,
        status: 'completed'
      };

      session.blockOneData = blockOneData;
      session.updatedAt = new Date();
      session.isComplete = this.checkSessionCompleteness(session);

      await this.saveSession(session);
      console.log('–î–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∞ 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ë–ª–æ–∫–∞ 1:', error);
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∞ 2
   */
  async saveBlockTwoData(
    sessionId: string,
    stateRoadBaseRate: number,
    localRoadBaseRate: number,
    stateInflationIndexes: number[],
    localInflationIndexes: number[],
    selectedRegion: string,
    stateRoadRates: any,
    localRoadRates: any,
    fundingResults: any
  ): Promise<boolean> {
    try {
      const user = await this.getUserSession();
      const session = await this.getSession(sessionId);
      
      if (!session) {
        console.error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sessionId);
        return false;
      }

      const blockTwoData: BlockTwoHistoryData = {
        id: `block_two_${Date.now()}`,
        userId: user.userId,
        sessionId,
        timestamp: new Date(),
        stateRoadBaseRate,
        localRoadBaseRate,
        stateInflationIndexes: [...stateInflationIndexes],
        localInflationIndexes: [...localInflationIndexes],
        selectedRegion,
        stateRoadRates: { ...stateRoadRates },
        localRoadRates: { ...localRoadRates },
        fundingResults: { ...fundingResults },
        status: 'completed'
      };

      session.blockTwoData = blockTwoData;
      session.updatedAt = new Date();
      session.isComplete = this.checkSessionCompleteness(session);

      await this.saveSession(session);
      console.log('–î–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∞ 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ë–ª–æ–∫–∞ 2:', error);
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∞ 3
   */
  async saveBlockThreeData(
    sessionId: string,
    sections: RoadSectionUI[],
    planningData: any,
    complianceAnalysis: any,
    reportText: string
  ): Promise<boolean> {
    try {
      const user = await this.getUserSession();
      const session = await this.getSession(sessionId);
      
      if (!session) {
        console.error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sessionId);
        return false;
      }

      const blockThreeData: BlockThreeHistoryData = {
        id: `block_three_${Date.now()}`,
        userId: user.userId,
        sessionId,
        timestamp: new Date(),
        sections: [...sections],
        planningData: { ...planningData },
        complianceAnalysis: { ...complianceAnalysis },
        reportText,
        status: 'completed'
      };

      session.blockThreeData = blockThreeData;
      session.updatedAt = new Date();
      session.isComplete = this.checkSessionCompleteness(session);

      await this.saveSession(session);
      console.log('–î–∞–Ω–Ω—ã–µ –ë–ª–æ–∫–∞ 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é');
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ë–ª–æ–∫–∞ 3:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ ID
   */
  private async getSession(sessionId: string): Promise<CalculationSession | null> {
    try {
    const stored = localStorage.getItem(this.STORAGE_KEY);
    if (!stored) {
      return null;
    }
    
    const sessions: CalculationSession[] = JSON.parse(stored);
      const session = sessions.find(s => s.id === sessionId) || null;
      
      if (session) {
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
        session.createdAt = new Date(session.createdAt);
        session.updatedAt = new Date(session.updatedAt);
      }
      
      return session;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
   */
  private checkSessionCompleteness(session: CalculationSession): boolean {
    return !!(session.blockOneData && session.blockTwoData && session.blockThreeData);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserSessions(): Promise<CalculationSession[]> {
    try {
      const user = await this.getUserSession();
      const stored = localStorage.getItem(this.STORAGE_KEY);
      if (!stored) return [];
      
      const sessions: CalculationSession[] = JSON.parse(stored);
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
      const sessionsWithDates = sessions.map(session => ({
        ...session,
        createdAt: new Date(session.createdAt),
        updatedAt: new Date(session.updatedAt)
      }));
      
      return sessionsWithDates
        .filter(s => s.userId === user.userId)
        .sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
   */
  async getAllSessions(): Promise<CalculationSession[]> {
    try {
    const stored = localStorage.getItem(this.STORAGE_KEY);
    if (!stored) {
      return [];
    }
    
    const sessions: CalculationSession[] = JSON.parse(stored);
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
      const sessionsWithDates = sessions.map(session => ({
        ...session,
        createdAt: new Date(session.createdAt),
        updatedAt: new Date(session.updatedAt)
      }));
      
      const sortedSessions = sessionsWithDates.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());
      return sortedSessions;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getCurrentSession(): Promise<CalculationSession | null> {
    try {
    const user = await this.getUserSession();
    if (!user.currentSessionId) {
      return null;
    }
    
    const session = await this.getSession(user.currentSessionId);
      return session;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é
   */
  async deleteSession(sessionId: string): Promise<boolean> {
    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      if (!stored) return false;
      
      const sessions: CalculationSession[] = JSON.parse(stored);
      const filteredSessions = sessions.filter(s => s.id !== sessionId);
      
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(filteredSessions));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.getUserSession();
      user.sessions = user.sessions.filter(id => id !== sessionId);
      if (user.currentSessionId === sessionId) {
        user.currentSessionId = null;
      }
      await this.saveUserSession(user);
      
      console.log(`–°–µ—Å—Å–∏—è ${sessionId} —É–¥–∞–ª–µ–Ω–∞`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
      return false;
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –≤ JSON
   */
  async exportSession(sessionId: string): Promise<string | null> {
    try {
      const session = await this.getSession(sessionId);
      if (!session) return null;
      
      return JSON.stringify(session, null, 2);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  async getStatistics(): Promise<{
    totalSessions: number;
    completedSessions: number;
    inProgressSessions: number;
    totalUsers: number;
    currentUser: string;
  }> {
    try {
      const allSessions = await this.getAllSessions();
      const user = await this.getUserSession();
      
      const completedSessions = allSessions.filter(s => s.isComplete).length;
      const inProgressSessions = allSessions.length - completedSessions;
      
      const storedUsers = localStorage.getItem(this.USER_SESSIONS_KEY);
      const totalUsers = storedUsers ? JSON.parse(storedUsers).length : 0;
      
      return {
        totalSessions: allSessions.length,
        completedSessions,
        inProgressSessions,
        totalUsers,
        currentUser: user.userName
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        totalSessions: 0,
        completedSessions: 0,
        inProgressSessions: 0,
        totalUsers: 0,
        currentUser: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
      };
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async cleanupOldData(daysToKeep: number = 30): Promise<number> {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
      
      const stored = localStorage.getItem(this.STORAGE_KEY);
      if (!stored) return 0;
      
      const sessions: CalculationSession[] = JSON.parse(stored);
      const filteredSessions = sessions.filter(s => s.updatedAt > cutoffDate);
      
      const deletedCount = sessions.length - filteredSessions.length;
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(filteredSessions));
      
      console.log(`–û—á–∏—â–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π`);
      return deletedCount;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async clearAllData(): Promise<void> {
    try {
      console.log('üî¥ HistoryService: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö');
      
      // –û—á–∏—â–∞–µ–º localStorage
      localStorage.removeItem(this.STORAGE_KEY);
      localStorage.removeItem('persist:root');
      localStorage.removeItem('persist:history');
      localStorage.removeItem('persist:blockOne');
      localStorage.removeItem('persist:blockTwo');
      localStorage.removeItem('persist:blockThree');
      localStorage.removeItem('persist:roadData');
      
      // –û—á–∏—â–∞–µ–º sessionStorage
      sessionStorage.clear();
      
      // –û—á–∏—â–∞–µ–º IndexedDB –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      if ('indexedDB' in window) {
        try {
          const databases = await indexedDB.databases();
          for (const db of databases) {
            if (db.name && db.name.includes('road')) {
              indexedDB.deleteDatabase(db.name);
            }
          }
        } catch (e) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å IndexedDB:', e);
        }
      }
      
      console.log('üî¥ HistoryService: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
}

// ==================== –≠–ö–°–ü–û–†–¢ –°–ò–ù–ì–õ–¢–û–ù–ê ====================

export const historyService = new HistoryService();
export default historyService;
